@startuml
namespace ViewModels{
  class MainWindowViewModel {
    .. Reactive Properties ..
    + SearchWord : ReactiveProperty<string> { get; }
    + SelectedImage : ReactiveProperty<WebImageViewModel> { get; }
    + PercentProgress : ReactiveProperty<double> { get; }
    + StatusMessage : ReadOnlyReactiveProperty<LogMessage> { get; }
    + ErrorLogsVisibility : ReactiveProperty<Visibility> { get; }
    .. Reactive Collection ..
    + ErrorLogs : ReadOnlyReactiveCollection<LogMessage> { get; }
    + Images : ReadOnlyReactiveCollection<WebImageViewModel> { get; }
    .. Reactive Commands ..
    + SearchCommand : ReactiveCommand { get; }
    + CancelCommand : ReactiveCommand { get; }
    + ClearErrorLogsCommand : ReactiveCommand { get; }
    --
    + MainWindowViewModel()
    + Dispose() : void
  }
  class WebImageViewModel {
    .. Reactive Property ..
    + Thumbnail : ReadOnlyReactiveProperty<ImageSource> { get; }
    + DisplayImage : ReadOnlyReactiveProperty<ImageSource> { get; }
    + Overlay : ReadOnlyReactiveProperty<ImageSource> { get; }
    + SourceUrl : ReadOnlyReactiveProperty<string> { get; }
    + SourceTitle : ReadOnlyReactiveProperty<string> { get; }
    + ImageProperty : ReadOnlyReactiveProperty<ImageProperty> { get; }
    + IsProcessing : ReadOnlyReactiveProperty<bool> { get; }
    + ProgressVisibility : ReadOnlyReactiveProperty<Visibility> { get; }
    .. Reactive Command ..
    + SizeChangedCommand : ReactiveCommand<Size> { get; }
    + NavigateCommand : ReactiveCommand { get; }
    --
    + WebImageViewModel(source:WebImage, visionApiSubscriptionKey:string, logger:ILogger)
    + <<async>> DownloadImageDetailsAsync() : Task
    + Dispose() : void
  }
  MainWindowViewModel *-d- Reactive.Bindings.ReadOnlyReactiveCollection : Images
  Reactive.Bindings.ReadOnlyReactiveCollection "1" o-u- "0..*" WebImageViewModel:items
  MainWindowViewModel -> WebImageViewModel :<<create>>
}
namespace Models{
  class WebImage {
    + <<event>> PropertyChanged : PropertyChangedEventHandler
    --
    + Thumbnail : ImageSource {get;}
    + DisplayImage : ImageSource {get;}
    + Overlay : ImageSource {get;}
    + MediaUrl : Uri {get;}
    + SourceUrl : string  {get;}
    + SourceTitle : string  {get;}
    + ImageProperty : ImageProperty {get;}
    --
    + WebImage(ImageResult bingResult, ILogger logger)
    + <<async>> DownLoadThumbnailAsync():Task
    + <<async>> DownLoadFullImageAsync():Task
    + <<async>> AnalyzeImageAsync(subscriptionKey:string) : Task
    + DrawFaceRect(imageSize:Size) : void
  }

  class WebImageStore {
    + Images : ReadOnlyObservableCollection<WebImage> { get;}
    --
    + WebImageStore(bingApiAccountKey:string , visionApiSubscriptionKey:string, logger:ILogger)
    + Cancel():void
    + Clear():void
    + DownloadWebImage(searchWord:string , progress:IProgressNotifier):void
    + Dispose():void
  }

  WebImageStore *-u- System.Collections.ObjectModel.ReadOnlyObservableCollection :Images
  System.Collections.ObjectModel.ReadOnlyObservableCollection "1" o-d- "0..*" WebImage : items
  WebImageStore -> WebImage : <<create>>
}

namespace Reactive.Bindings{
  class ReadOnlyReactiveCollection
}
namespace System.Collections.ObjectModel{
  class ReadOnlyObservableCollection
}
ViewModels.MainWindowViewModel *-d- Models.WebImageStore : webImageStore
ViewModels.WebImageViewModel o-d- Models.WebImage : source
Reactive.Bindings.ReadOnlyReactiveCollection o-- System.Collections.ObjectModel.ReadOnlyObservableCollection:source
@enduml
